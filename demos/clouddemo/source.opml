<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sun, 18 Dec 2022 15:23:06 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: cloudDemo</title>
		<dateCreated>Thu, 15 Dec 2022 19:30:49 GMT</dateCreated>
		<dateModified>Sun, 18 Dec 2022 15:23:06 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 14, 26, 33, 41, 62, 72, 83, 84, 85, 90, 91, 99, 100, 107, 108, 110, 115, 119, 122, 124</expansionState>
		<vertScrollState>84</vertScrollState>
		<windowTop>86</windowTop>
		<windowLeft>407</windowLeft>
		<windowBottom>1048</windowBottom>
		<windowRight>1583</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/clouddemo/" created="Thu, 02 Dec 2021 14:19:56 GMT">
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;clouddemo&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A working example of a server-based feed reader implementation of rssCloud&quot;," created="Fri, 02 Jul 2021 14:57:59 GMT"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/reallysimple.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;main&quot;: &quot;clouddemo.js&quot;,"/>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;clouddemo.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;http&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;,"/>
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;qs&quot;: &quot;*&quot;,"/>
						<outline text="&quot;reallysimple&quot;: &quot;*&quot;,"/>
						<outline text="&quot;xml2js&quot;: &quot;*&quot;"/>
						<outline text="&quot;daveappserver&quot;: &quot;*&quot;" isComment="true"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="clouddemo.js" created="Thu, 17 Feb 2022 14:26:38 GMT">
				<outline text="const myVersion = &quot;0.4.0&quot;, myProductName = &quot;clouddemo&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text="" created="Wed, 24 Nov 2021 15:06:21 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const utils = require (&quot;daveutils&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const qs = require (&quot;querystring&quot;); "/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const daveappserver = require (&quot;daveappserver&quot;); " isComment="true"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;); "/>
				<outline text="const xml2js = require (&quot;xml2js&quot;);"/>
				<outline text="const reallysimple = require (&quot;reallysimple&quot;); "/>
				<outline text="" created="Mon, 21 Nov 2022 20:15:42 GMT"/>
				<outline text="var config = {" created="Mon, 29 Nov 2021 15:52:16 GMT">
					<outline text="port: process.env.PORT || 1422," created="Fri, 16 Dec 2022 18:51:38 GMT"/>
					<outline text="flPostEnabled: true," created="Sat, 17 Dec 2022 16:10:45 GMT"/>
					<outline text="flLogToConsole: true, //davehttp logs each request to the console"/>
					<outline text="flTraceOnError: false, //davehttp does not try to catch the error" created="Fri, 16 Dec 2022 21:13:38 GMT"/>
					<outline text="defaultFeedUrl: &quot;http://scripting.com/rss.xml&quot;," isComment="true" created="Thu, 15 Dec 2022 18:49:49 GMT"/>
					<outline text="defaultFeedUrl: &quot;https://unberkeley.wordpress.com/feed/&quot;, //4" created="Thu, 15 Dec 2022 18:49:49 GMT"/>
					<outline text="thisServer: { //how the cloud server should call us back -- //1" created="Thu, 15 Dec 2022 19:09:01 GMT">
						<outline text="domain: &quot;clouddemo.rss.land&quot;," created="Thu, 15 Dec 2022 19:09:18 GMT"/>
						<outline text="port: 80," created="Thu, 15 Dec 2022 19:09:25 GMT"/>
						<outline text="feedUpdatedCallback: &quot;/feedupdated&quot;" created="Thu, 15 Dec 2022 19:09:28 GMT"/>
						<outline text="}" created="Thu, 15 Dec 2022 19:09:05 GMT"/>
						</outline>
					<outline text="};" created="Mon, 29 Nov 2021 15:52:19 GMT"/>
					</outline>
				<outline text="var whenLastRequest = new Date (0);" created="Fri, 16 Dec 2022 17:13:13 GMT"/>
				<outline text="" created="Fri, 16 Dec 2022 17:13:21 GMT"/>
				<outline text="var stats = {" created="Sun, 12 Jun 2022 22:40:46 GMT">
					<outline text="events: new Array () //2" created="Fri, 16 Dec 2022 21:52:59 GMT"/>
					<outline text="ctLaunches: 0," isComment="true" created="Sun, 12 Jun 2022 22:53:47 GMT"/>
					<outline text="whenLastLaunch: undefined," isComment="true" created="Sun, 12 Jun 2022 22:54:40 GMT"/>
					<outline text="ctFeedReads: 0," isComment="true" created="Sun, 12 Jun 2022 22:40:58 GMT"/>
					<outline text="whenLastFeedRead: undefined," isComment="true" created="Sun, 12 Jun 2022 22:41:04 GMT"/>
					<outline text="ctFeedReadErrors: 0," isComment="true" created="Sun, 12 Jun 2022 22:43:50 GMT"/>
					<outline text="whenLastFeedReadError: undefined," isComment="true" created="Sun, 12 Jun 2022 22:41:04 GMT"/>
					<outline text="ctSecsLastRequest: undefined," isComment="true" created="Mon, 13 Jun 2022 12:17:16 GMT"/>
					<outline text="feeds: new Object ()" isComment="true" created="Sun, 12 Jun 2022 22:41:14 GMT"/>
					<outline text="}" created="Sun, 12 Jun 2022 22:40:52 GMT"/>
					</outline>
				<outline text="var flStatsChanged = false;"/>
				<outline text="const fnameStats = &quot;stats.json&quot;;" created="Fri, 16 Dec 2022 21:58:25 GMT"/>
				<outline text="" created="Mon, 21 Nov 2022 21:02:27 GMT"/>
				<outline text="function readConfig (callback) {" isComment="true" created="Wed, 16 Nov 2022 15:42:09 GMT">
					<outline text="fs.readFile (&quot;config.json&quot;, function (err, jsontext) {" created="Wed, 16 Nov 2022 15:42:34 GMT">
						<outline text="if (!err) {" created="Wed, 16 Nov 2022 15:42:51 GMT">
							<outline text="var jstruct;" created="Wed, 16 Nov 2022 15:42:50 GMT"/>
							<outline text="try {" created="Wed, 16 Nov 2022 15:43:21 GMT">
								<outline text="jstruct = JSON.parse (jsontext);" created="Wed, 16 Nov 2022 15:43:57 GMT"/>
								<outline text="for (var x in jstruct) {" created="Wed, 16 Nov 2022 15:44:48 GMT">
									<outline text="config [x] = jstruct [x];" created="Wed, 16 Nov 2022 15:44:54 GMT"/>
									<outline text="}" created="Wed, 16 Nov 2022 15:45:01 GMT"/>
									</outline>
								<outline text="}" created="Wed, 16 Nov 2022 15:43:26 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Wed, 16 Nov 2022 15:43:26 GMT">
								<outline text="console.log (&quot;readConfig: err.message == &quot; + utils.jsonStringify (err.message));" created="Wed, 16 Nov 2022 15:43:30 GMT"/>
								<outline text="}" created="Wed, 16 Nov 2022 15:43:43 GMT"/>
								</outline>
							<outline text="}" created="Wed, 16 Nov 2022 15:42:55 GMT"/>
							</outline>
						<outline text="callback ();" created="Wed, 16 Nov 2022 15:49:59 GMT"/>
						<outline text="});" created="Wed, 16 Nov 2022 15:42:44 GMT"/>
						</outline>
					<outline text="}" created="Wed, 16 Nov 2022 15:42:33 GMT"/>
					</outline>
				<outline text="function readStats (callback) {" created="Fri, 16 Dec 2022 21:56:09 GMT">
					<outline text="fs.readFile (fnameStats, function (err, jsontext) {" created="Fri, 16 Dec 2022 21:55:19 GMT">
						<outline text="try {" created="Fri, 16 Dec 2022 21:55:42 GMT">
							<outline text="stats = JSON.parse (jsontext);" created="Fri, 16 Dec 2022 21:56:26 GMT"/>
							<outline text="callback (undefined);" created="Fri, 16 Dec 2022 21:57:18 GMT"/>
							<outline text="}" created="Fri, 16 Dec 2022 21:55:44 GMT"/>
							</outline>
						<outline text="catch (err) {" created="Fri, 16 Dec 2022 21:55:44 GMT">
							<outline text="callback (err);" created="Fri, 16 Dec 2022 21:56:40 GMT"/>
							<outline text="}" created="Fri, 16 Dec 2022 21:56:46 GMT"/>
							</outline>
						<outline text="});" created="Fri, 16 Dec 2022 21:55:36 GMT"/>
						</outline>
					<outline text="}" created="Fri, 16 Dec 2022 21:56:18 GMT"/>
					</outline>
				<outline text="function statsChanged () {" created="Sun, 12 Jun 2022 22:40:47 GMT">
					<outline text="flStatsChanged = true;" created="Sun, 12 Jun 2022 22:45:07 GMT"/>
					<outline text="}" created="Sun, 12 Jun 2022 22:45:03 GMT"/>
					</outline>
				<outline text="function logEvent (infoAboutEvent) {" created="Fri, 16 Dec 2022 22:07:19 GMT">
					<outline text="if (infoAboutEvent.whenstart !== undefined) {" created="Sat, 17 Dec 2022 02:28:09 GMT">
						<outline text="infoAboutEvent.ctSecs = utils.secondsSince (infoAboutEvent.whenstart);" created="Sat, 17 Dec 2022 02:28:34 GMT"/>
						<outline text="delete infoAboutEvent.whenstart;" created="Sat, 17 Dec 2022 02:29:08 GMT"/>
						<outline text="}" created="Sat, 17 Dec 2022 02:28:28 GMT"/>
						</outline>
					<outline text="infoAboutEvent.when = new Date ().toLocaleString ();" created="Fri, 16 Dec 2022 22:18:06 GMT"/>
					<outline text="stats.events.push (infoAboutEvent); //insert at beginning" created="Fri, 16 Dec 2022 22:07:42 GMT"/>
					<outline text="statsChanged ();" created="Fri, 16 Dec 2022 22:08:02 GMT"/>
					<outline text="}" created="Fri, 16 Dec 2022 22:07:34 GMT"/>
					</outline>
				<outline text="function readFeed (feedUrl, callback) {" isComment="true" created="Sun, 12 Jun 2022 13:32:03 GMT">
					<outline text="const whenstart = new Date ();" created="Sun, 12 Jun 2022 22:51:51 GMT"/>
					<outline text="reallysimple.readFeed (feedUrl, function (err, theFeed) {">
						<outline text="if (err) {" created="Sun, 12 Jun 2022 22:46:54 GMT">
							<outline text="callback (err);" created="Sun, 12 Jun 2022 22:48:44 GMT"/>
							<outline text="}" created="Sun, 12 Jun 2022 22:46:57 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 12 Jun 2022 22:46:58 GMT">
							<outline text="callback (undefined, theFeed);" created="Sun, 12 Jun 2022 22:48:44 GMT"/>
							<outline text="}" created="Sun, 12 Jun 2022 22:46:59 GMT"/>
							</outline>
						<outline text="});" created="Sun, 12 Jun 2022 22:46:50 GMT"/>
						</outline>
					<outline text="}" created="Sun, 12 Jun 2022 13:32:15 GMT"/>
					</outline>
				<outline text="function requestWithRedirect (theRequest, callback) { //12/11/22 by DW" created="Wed, 28 Sep 2022 17:11:16 GMT">
					<outline text="Changes" isComment="true" created="Sun, 11 Dec 2022 15:02:32 GMT">
						<outline text="12/11/22; 10:02:34 AM by DW" created="Sun, 11 Dec 2022 15:02:34 GMT">
							<outline text="Andrew Shell says that request doesn't pass through the body of a request through callbacks. So we created a version of request that does." created="Sun, 11 Dec 2022 15:02:35 GMT">
								<outline text="https://gist.github.com/andrewshell/8b57f96bf62a1dea9fa1a8137e13951a?permalink_comment_id=4398360#gistcomment-4398360" created="Sun, 11 Dec 2022 15:03:35 GMT"/>
								</outline>
							<outline text="Andrew's version is below..." created="Sun, 11 Dec 2022 15:03:10 GMT">
								<outline text="function requestFollowRedirects(theRequest, callback) {">
									<outline text="theRequest.followAllRedirects = false;"/>
									<outline text="request (theRequest, function (err, response, body) {">
										<outline text="if (parseInt(theRequest.maxRedirects) &gt; 0 &amp;&amp; [301, 320].includes(response.statusCode) &amp;&amp; response.headers.location != null) {">
											<outline text="const newRequest = Object.assign({}, theRequest, { url: response.headers.location });"/>
											<outline text="newRequest.maxRedirects--;"/>
											<outline text="requestFollowRedirects (newRequest, callback);"/>
											<outline text="}"/>
											</outline>
										<outline text="callback (err, response, body)"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								</outline>
							</outline>
						</outline>
					<outline text="var myRequest = new Object ();" created="Sun, 11 Dec 2022 15:14:24 GMT"/>
					<outline text="for (var x in theRequest) {" created="Sun, 11 Dec 2022 15:14:41 GMT">
						<outline text="myRequest [x] = theRequest [x];" created="Sun, 11 Dec 2022 15:14:47 GMT"/>
						<outline text="}" created="Sun, 11 Dec 2022 15:14:55 GMT"/>
						</outline>
					<outline text="myRequest.followAllRedirects = false; //we're doing this ourselves"/>
					<outline text="myRequest.maxRedirects = (myRequest.maxRedirects === undefined) ? 0 : myRequest.maxRedirects;" created="Sun, 11 Dec 2022 15:17:25 GMT"/>
					<outline text="request (myRequest, function (err, response, body) {" created="Sun, 11 Dec 2022 14:56:02 GMT">
						<outline text="const code = response.statusCode;" created="Sun, 11 Dec 2022 14:57:09 GMT"/>
						<outline text="if ((code == 301) || (code == 302)) { //redirect" created="Sun, 11 Dec 2022 14:57:18 GMT">
							<outline text="if (myRequest.maxRedirects == 0) {" created="Sun, 11 Dec 2022 15:00:40 GMT">
								<outline text="callback (err, response, body);" created="Sun, 11 Dec 2022 15:00:55 GMT"/>
								<outline text="}" created="Sun, 11 Dec 2022 15:00:52 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 11 Dec 2022 15:01:24 GMT">
								<outline text="myRequest.maxRedirects--;" created="Sun, 11 Dec 2022 15:01:30 GMT"/>
								<outline text="myRequest.url = response.headers.location;" created="Sun, 11 Dec 2022 15:12:05 GMT"/>
								<outline text="requestWithRedirect (myRequest, callback);" created="Sun, 11 Dec 2022 15:01:38 GMT"/>
								<outline text="}" created="Sun, 11 Dec 2022 15:01:26 GMT"/>
								</outline>
							<outline text="}" created="Sun, 11 Dec 2022 14:57:33 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 11 Dec 2022 15:02:08 GMT">
							<outline text="callback (err, response, body);" created="Sun, 11 Dec 2022 15:02:09 GMT"/>
							<outline text="}" created="Sun, 11 Dec 2022 15:10:23 GMT"/>
							</outline>
						<outline text="});" created="Sun, 11 Dec 2022 14:56:02 GMT"/>
						</outline>
					<outline text="}" created="Sun, 11 Dec 2022 14:55:31 GMT"/>
					</outline>
				<outline text="function getUrlCloudServer (theCloudElement) {" created="Sat, 19 Mar 2022 16:03:57 GMT">
					<outline text="var url = undefined;" created="Sat, 19 Mar 2022 16:05:12 GMT"/>
					<outline text="if ((theCloudElement !== undefined) &amp;&amp; (theCloudElement.type == &quot;rsscloud&quot;)) {">
						<outline text="url = &quot;http://&quot; + theCloudElement.domain + &quot;:&quot; + theCloudElement.port + theCloudElement.path;"/>
						<outline text="}"/>
						</outline>
					<outline text="return (url);" created="Sat, 19 Mar 2022 16:05:18 GMT"/>
					<outline text="}" created="Sat, 19 Mar 2022 16:04:05 GMT"/>
					</outline>
				<outline text="function pleaseNotify (urlCloudServer, feedUrl, thisServer, callback) { //3">
					<outline text="Changes" isComment="true">
						<outline text="12/15/22; 3:00:08 PM by DW" created="Thu, 15 Dec 2022 20:00:07 GMT">
							<outline text="Adapted from FeedLand server. " created="Thu, 15 Dec 2022 20:00:08 GMT"/>
							</outline>
						<outline text="12/12/22; 1:21:23 PM by DW" created="Mon, 12 Dec 2022 18:21:23 GMT">
							<outline text="New parameter, domain." created="Mon, 12 Dec 2022 18:21:23 GMT"/>
							</outline>
						<outline text="12/11/22; 1:13:34 PM by DW" created="Sun, 11 Dec 2022 18:13:34 GMT">
							<outline text="Use new requestWithRedirect function, it handles the redirects itself, apparently the built-in request function doesn't carry the body across redirects. " created="Sun, 11 Dec 2022 18:13:35 GMT"/>
							</outline>
						<outline text="12/10/22; 9:50:45 AM by DW" created="Sat, 10 Dec 2022 14:50:44 GMT">
							<outline text="Apparently we weren't following redirects because we used an option that only applies to GET requests? Not totally clear from docs." created="Sat, 10 Dec 2022 14:50:46 GMT"/>
							<outline text="Replaced with followAllRedirects and maxRedirects = 5." created="Sat, 10 Dec 2022 14:51:18 GMT"/>
							</outline>
						<outline text="10/8/22; 2:11:18 PM by DW" created="Sat, 08 Oct 2022 18:11:16 GMT">
							<outline text="Cribbed from RIver6." created="Sat, 08 Oct 2022 18:11:19 GMT"/>
							</outline>
						<outline text="2/9/17; 6:37:04 PM by DW">
							<outline text="Per Andrew's pull request, we now check for body.success in addition to watching for errors. "/>
							</outline>
						</outline>
					<outline text="function buildParamList (paramtable) { //12/10/22 by DW" created="Sat, 09 Aug 2014 15:39:08 GMT" pgfnum="43181">
						<outline text="Changes" isComment="true" created="Wed, 04 Aug 2021 14:47:01 GMT">
							<outline text="12/10/22; 10:20:59 AM by DW" created="Sat, 10 Dec 2022 15:20:59 GMT">
								<outline text="Cribbed from feedToMasto." created="Sat, 10 Dec 2022 15:20:59 GMT"/>
								</outline>
							<outline text="8/4/21; 10:47:04 AM by DW" created="Wed, 04 Aug 2021 14:47:03 GMT">
								<outline text="Copied twBuildParamList. If an element of params is undefined, don't include it. We were encoding it as a string, &quot;undefined&quot; and all of a sudden on the other side, in davetwitter, it was calling it an error. It is pretty errorish, but why it started now, that's a mystery." created="Wed, 04 Aug 2021 14:47:04 GMT"/>
								</outline>
							</outline>
						<outline text="if (paramtable === undefined) {" created="Sun, 04 Dec 2022 13:46:26 GMT">
							<outline text="return (&quot;&quot;);" created="Sun, 04 Dec 2022 13:46:32 GMT"/>
							<outline text="}" created="Sun, 04 Dec 2022 13:46:35 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 04 Dec 2022 13:46:37 GMT">
							<outline text="var s = &quot;&quot;;" created="Sat, 09 Aug 2014 15:39:47 GMT" pgfnum="43188"/>
							<outline text="for (var x in paramtable) {" created="Sat, 09 Aug 2014 15:39:38 GMT" pgfnum="43186">
								<outline text="if (paramtable [x] !== undefined) { //8/4/21 by DW" created="Wed, 04 Aug 2021 14:48:52 GMT">
									<outline text="if (s.length &gt; 0) {" created="Sat, 09 Aug 2014 15:40:02 GMT" pgfnum="43189">
										<outline text="s += &quot;&amp;&quot;;" created="Sat, 09 Aug 2014 15:40:08 GMT" pgfnum="43190"/>
										<outline text="}" created="Sat, 09 Aug 2014 15:40:14 GMT" pgfnum="43191"/>
										</outline>
									<outline text="s += x + &quot;=&quot; + encodeURIComponent (paramtable [x]);" created="Sat, 09 Aug 2014 15:40:19 GMT" pgfnum="43192"/>
									<outline text="}" created="Wed, 04 Aug 2021 14:49:01 GMT"/>
									</outline>
								<outline text="}" created="Sat, 09 Aug 2014 15:39:43 GMT" pgfnum="43187"/>
								</outline>
							<outline text="return (s);" created="Sat, 09 Aug 2014 15:40:54 GMT" pgfnum="43193"/>
							<outline text="}" created="Sun, 04 Dec 2022 13:46:40 GMT"/>
							</outline>
						<outline text="}" created="Sat, 09 Aug 2014 15:39:35 GMT" pgfnum="43185"/>
						</outline>
					<outline text="var now = new Date ();" isComment="true"/>
					<outline text="const theRequest = {">
						<outline text="url: urlCloudServer,"/>
						<outline text="method: &quot;POST&quot;,"/>
						<outline text="followAllRedirects: true, " created="Thu, 31 Jul 2014 16:39:18 GMT" pgfnum="43069"/>
						<outline text="maxRedirects: 5,"/>
						<outline text="headers: {">
							<outline text="&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;" created="Sun, 04 Dec 2022 13:43:35 GMT"/>
							<outline text="},"/>
							</outline>
						<outline text="body: buildParamList ({" created="Sun, 20 Nov 2022 22:11:40 GMT">
							<outline text="domain: thisServer.domain, " created="Mon, 12 Dec 2022 18:22:26 GMT"/>
							<outline text="port: thisServer.port,"/>
							<outline text="path: thisServer.feedUpdatedCallback,"/>
							<outline text="url1: feedUrl,"/>
							<outline text="protocol: &quot;http-post&quot;"/>
							<outline text="})" created="Sat, 10 Dec 2022 15:19:54 GMT"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="console.log (&quot;pleaseNotify: theRequest == &quot; + utils.jsonStringify (theRequest)); //12/10/22 by DW" isComment="true" created="Sat, 10 Dec 2022 15:05:08 GMT"/>
					<outline text="requestWithRedirect (theRequest, function (err, response, body) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback (undefined, body);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function requestNotification (feedUrl, callback) {" created="Thu, 15 Dec 2022 18:53:52 GMT">
					<outline text="const whenstart = new Date ();" created="Sat, 17 Dec 2022 02:27:05 GMT"/>
					<outline text="function getResponseFromXml (xmltext, callback) {" created="Fri, 16 Dec 2022 22:14:10 GMT">
						<outline text="var options = {">
							<outline text="explicitArray: false"/>
							<outline text="};"/>
							</outline>
						<outline text="xml2js.parseString (xmltext, options, function (err, jstruct) {">
							<outline text="if (err) { ">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (jstruct == null) { //12/27/21 by DW" created="Mon, 27 Dec 2021 15:06:51 GMT">
									<outline text="let err = {message: &quot;Internal error: xml2js.parseString returned null.&quot;};" created="Mon, 27 Dec 2021 15:07:32 GMT"/>
									<outline text="callback (err);" created="Mon, 27 Dec 2021 15:07:32 GMT"/>
									<outline text="}" created="Mon, 27 Dec 2021 15:07:04 GMT"/>
									</outline>
								<outline text="else {" created="Mon, 27 Dec 2021 15:07:06 GMT">
									<outline text="callback (undefined, jstruct);" created="Fri, 16 Dec 2022 22:15:10 GMT"/>
									<outline text="}" created="Mon, 27 Dec 2021 15:07:08 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Fri, 16 Dec 2022 22:14:28 GMT"/>
						</outline>
					<outline text="reallysimple.readFeed (feedUrl, function (err, theFeed) {" created="Thu, 15 Dec 2022 18:54:14 GMT">
						<outline text="if (err) {" created="Thu, 15 Dec 2022 18:54:30 GMT">
							<outline text="console.log (err.message);" created="Thu, 15 Dec 2022 18:54:32 GMT"/>
							<outline text="if (callback !== undefined) {" created="Fri, 16 Dec 2022 17:22:43 GMT">
								<outline text="callback (err);" created="Thu, 15 Dec 2022 18:55:36 GMT"/>
								<outline text="}" created="Fri, 16 Dec 2022 17:22:48 GMT"/>
								</outline>
							<outline text="}" created="Thu, 15 Dec 2022 18:54:38 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 15 Dec 2022 18:54:38 GMT">
							<outline text="console.log (&quot;theFeed.cloud == &quot; + utils.jsonStringify (theFeed.cloud));" isComment="true" created="Thu, 15 Dec 2022 18:54:41 GMT"/>
							<outline text="var urlCloudServer = getUrlCloudServer (theFeed.cloud);" created="Thu, 15 Dec 2022 18:58:29 GMT"/>
							<outline text="pleaseNotify (urlCloudServer, feedUrl, config.thisServer, function (err, xmltext) {">
								<outline text="if (err) {">
									<outline text="console.log (&quot;requestNotification: err.message == &quot; + err.message + &quot;, urlCloudServer == &quot; + urlCloudServer + &quot;, feedUrl == &quot; + feedUrl);"/>
									<outline text="logEvent ({" created="Fri, 16 Dec 2022 22:01:11 GMT">
										<outline text="type: &quot;requestNotification&quot;," created="Fri, 16 Dec 2022 22:01:54 GMT"/>
										<outline text="error: err.message, " created="Fri, 16 Dec 2022 22:02:06 GMT"/>
										<outline text="urlCloudServer," created="Fri, 16 Dec 2022 22:02:12 GMT"/>
										<outline text="feedUrl," created="Fri, 16 Dec 2022 22:02:18 GMT"/>
										<outline text="whenstart" created="Sat, 17 Dec 2022 02:27:17 GMT"/>
										<outline text="});" created="Fri, 16 Dec 2022 22:01:49 GMT"/>
										</outline>
									<outline text="if (callback !== undefined) {" created="Fri, 16 Dec 2022 17:22:43 GMT">
										<outline text="callback (err);" created="Thu, 15 Dec 2022 20:01:08 GMT"/>
										<outline text="}" created="Fri, 16 Dec 2022 17:22:48 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {" created="Sun, 09 Oct 2022 14:59:58 GMT">
									<outline text="console.log (&quot;requestNotification: feedUrl == &quot; + feedUrl);" isComment="true"/>
									<outline text="getResponseFromXml (xmltext, function (err, jstruct) {" created="Fri, 16 Dec 2022 22:15:27 GMT">
										<outline text="var theEvent = {" created="Sat, 17 Dec 2022 15:03:13 GMT">
											<outline text="type: &quot;requestNotification&quot;," created="Fri, 16 Dec 2022 22:01:54 GMT"/>
											<outline text="urlCloudServer," created="Fri, 16 Dec 2022 22:02:12 GMT"/>
											<outline text="response: jstruct.notifyResult [&quot;$&quot;]," created="Sat, 17 Dec 2022 15:37:00 GMT"/>
											<outline text="feedUrl," created="Fri, 16 Dec 2022 22:02:18 GMT"/>
											<outline text="whenstart" created="Sat, 17 Dec 2022 02:27:17 GMT"/>
											<outline text="}" created="Sat, 17 Dec 2022 15:04:30 GMT"/>
											</outline>
										<outline text="logEvent (theEvent);" created="Sat, 17 Dec 2022 15:05:19 GMT"/>
										<outline text="});" created="Fri, 16 Dec 2022 22:15:36 GMT"/>
										</outline>
									<outline text="var theEvent = {" isComment="true" created="Sat, 17 Dec 2022 15:03:13 GMT">
										<outline text="type: &quot;requestNotification&quot;," created="Fri, 16 Dec 2022 22:01:54 GMT"/>
										<outline text="urlCloudServer," created="Fri, 16 Dec 2022 22:02:12 GMT"/>
										<outline text="feedUrl," created="Fri, 16 Dec 2022 22:02:18 GMT"/>
										<outline text="whenstart" created="Sat, 17 Dec 2022 02:27:17 GMT"/>
										<outline text="}" created="Sat, 17 Dec 2022 15:04:30 GMT"/>
										</outline>
									<outline text="if (xmltext !== undefined) {" isComment="true" created="Sat, 17 Dec 2022 15:03:17 GMT">
										<outline text="getResponseFromXml (xmltext, function (err, jstruct) {" created="Fri, 16 Dec 2022 22:15:27 GMT">
											<outline text="theEvent.response = jstruct.notifyResult [&quot;$&quot;];" created="Sat, 17 Dec 2022 15:04:50 GMT"/>
											<outline text="logEvent (theEvent);" created="Sat, 17 Dec 2022 15:05:19 GMT"/>
											<outline text="});" created="Fri, 16 Dec 2022 22:15:36 GMT"/>
											</outline>
										<outline text="}" created="Sat, 17 Dec 2022 15:03:22 GMT"/>
										</outline>
									<outline text="else {" isComment="true" created="Sat, 17 Dec 2022 15:03:23 GMT">
										<outline text="logEvent (theEvent);" created="Sat, 17 Dec 2022 15:05:19 GMT"/>
										<outline text="}" created="Sat, 17 Dec 2022 15:03:24 GMT"/>
										</outline>
									<outline text="if (callback !== undefined) {" created="Fri, 16 Dec 2022 17:22:43 GMT">
										<outline text="callback (undefined, theFeed);" created="Thu, 15 Dec 2022 18:55:36 GMT"/>
										<outline text="}" created="Fri, 16 Dec 2022 17:22:48 GMT"/>
										</outline>
									<outline text="}" created="Sun, 09 Oct 2022 15:00:02 GMT"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Thu, 15 Dec 2022 18:54:40 GMT"/>
							</outline>
						<outline text="});" created="Thu, 15 Dec 2022 18:54:26 GMT"/>
						</outline>
					<outline text="}" created="Thu, 15 Dec 2022 18:54:09 GMT"/>
					</outline>
				<outline text="function handlePing (feedUrl, callback) { //5" created="Sat, 17 Dec 2022 16:13:22 GMT">
					<outline text="//12/17/22; 11:14:18 AM by DW" created="Sat, 17 Dec 2022 16:14:15 GMT">
						<outline text="//this is where you'd put code that reads the feed, looks for new or updated items" created="Sat, 17 Dec 2022 16:14:18 GMT"/>
						<outline text="//it's the punchline, why we did all this stuff in rssCloud, to get you this bit of info" created="Sat, 17 Dec 2022 16:14:42 GMT"/>
						<outline text="//much faster." created="Sat, 17 Dec 2022 16:14:58 GMT"/>
						</outline>
					<outline text="callback (undefined, {status: &quot;Got the update. Thanks! :-)&quot;})" created="Sat, 17 Dec 2022 16:13:31 GMT"/>
					<outline text="}" created="Sat, 17 Dec 2022 16:13:30 GMT"/>
					</outline>
				<outline text="function handleHttpRequest (theRequest) {" created="Sat, 06 Nov 2021 20:25:05 GMT">
					<outline text="var now = new Date ();"/>
					<outline text="const params = theRequest.params;"/>
					<outline text="function returnRedirect (url, code) { " isComment="true">
						<outline text="var headers = {">
							<outline text="location: url"/>
							<outline text="};"/>
							</outline>
						<outline text="if (code === undefined) {">
							<outline text="code = 302;"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (code, &quot;text/plain&quot;, code + &quot; REDIRECT&quot;, headers);"/>
						<outline text="}"/>
						<outline text=""/>
						</outline>
					<outline text="function returnPlainText (theString) {">
						<outline text="if (theString === undefined) {" created="Sat, 17 Dec 2022 15:19:03 GMT">
							<outline text="theString = &quot;&quot;;" created="Sat, 17 Dec 2022 15:19:12 GMT"/>
							<outline text="}" created="Sat, 17 Dec 2022 15:19:19 GMT"/>
							</outline>
						<outline text="console.log (&quot;returnPlainText: theString == &quot; + theString + &quot;, typeof theString == &quot; + typeof theString);" isComment="true" created="Sat, 17 Dec 2022 14:28:03 GMT"/>
						<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, theString);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnNotFound () {" created="Fri, 16 Dec 2022 19:04:28 GMT">
						<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
						<outline text="}" created="Fri, 16 Dec 2022 19:04:33 GMT"/>
						</outline>
					<outline text="function returnData (jstruct) {" isComment="true">
						<outline text="if (jstruct === undefined) {">
							<outline text="jstruct = {};"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnJsontext (jsontext) { //9/14/22 by DW" isComment="true">
						<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, jsontext.toString ());"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnError (jstruct) {">
						<outline text="theRequest.httpReturn (500, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnOpml (err, opmltext) {" isComment="true">
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="theRequest.httpReturn (200, &quot;text/xml&quot;, opmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function httpReturn (err, returnedValue) {" isComment="true">
						<outline text="Changed" isComment="true" created="Wed, 14 Sep 2022 19:47:30 GMT">
							<outline text="9/14/22; 3:47:35 PM by DW" created="Wed, 14 Sep 2022 19:47:34 GMT">
								<outline text="If the returned value is an object, call returnData, but if it's something else, return it as a string. " created="Wed, 14 Sep 2022 19:47:36 GMT"/>
								<outline text="In all cases, the returned type is application/json." created="Wed, 14 Sep 2022 19:48:09 GMT"/>
								<outline text="This allows the river routines to convert the object to jsontext so it can cache that instead of an object." created="Wed, 14 Sep 2022 19:48:38 GMT"/>
								</outline>
							</outline>
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (typeof returnedValue == &quot;object&quot;) {" created="Wed, 14 Sep 2022 19:49:36 GMT">
								<outline text="returnData (returnedValue);"/>
								<outline text="}" created="Wed, 14 Sep 2022 19:49:54 GMT"/>
								</outline>
							<outline text="else {" created="Wed, 14 Sep 2022 19:50:07 GMT">
								<outline text="returnJsontext (returnedValue); //9/14/22 by DW" created="Wed, 14 Sep 2022 19:52:50 GMT"/>
								<outline text="}" created="Wed, 14 Sep 2022 19:50:09 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="switch (theRequest.method) {" created="Thu, 01 May 2014 20:42:04 GMT" pgfnum="40803">
						<outline text="case &quot;POST&quot;:" created="Thu, 01 May 2014 20:42:39 GMT" pgfnum="40807">
							<outline text="switch (theRequest.lowerpath) {">
								<outline text="case config.thisServer.feedUpdatedCallback: //6" created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265">
									<outline text="var jstruct = qs.parse (theRequest.postBody);"/>
									<outline text="handlePing (jstruct.url, function (err, pingResponse) { //read the feed, add new stuff to database, etc." created="Sat, 17 Dec 2022 16:12:28 GMT">
										<outline text="returnPlainText (pingResponse.status);"/>
										<outline text="logEvent ({" created="Fri, 16 Dec 2022 22:01:11 GMT">
											<outline text="method: &quot;POST&quot;," created="Fri, 16 Dec 2022 22:06:31 GMT"/>
											<outline text="path: config.thisServer.feedUpdatedCallback," created="Fri, 16 Dec 2022 22:01:54 GMT"/>
											<outline text="params: jstruct," created="Fri, 16 Dec 2022 22:03:27 GMT"/>
											<outline text="myResponse: pingResponse" created="Sat, 17 Dec 2022 16:17:59 GMT"/>
											<outline text="});" created="Fri, 16 Dec 2022 22:01:49 GMT"/>
											</outline>
										<outline text="});" created="Sat, 17 Dec 2022 16:12:43 GMT"/>
										</outline>
									<outline text="break;" created="Thu, 30 Jun 2022 15:30:27 GMT"/>
									</outline>
								<outline text="default: " created="Thu, 30 Jun 2022 15:30:25 GMT">
									<outline text="returnNotFound ()"/>
									<outline text="break;" created="Thu, 30 Jun 2022 15:30:27 GMT"/>
									</outline>
								<outline text="}" created="Mon, 03 Feb 2014 03:20:25 GMT" pgfnum="36830"/>
								</outline>
							<outline text="break;" created="Sat, 17 Dec 2022 15:21:18 GMT"/>
							</outline>
						<outline text="case &quot;GET&quot;:" created="Thu, 01 May 2014 20:42:39 GMT" pgfnum="40807">
							<outline text="switch (theRequest.lowerpath) {">
								<outline text="case &quot;/now&quot;: " created="Thu, 03 Nov 2022 19:29:32 GMT">
									<outline text="returnPlainText (new Date ());" created="Fri, 04 Nov 2022 14:42:33 GMT"/>
									<outline text="return (true);"/>
									</outline>
								<outline text="case config.thisServer.feedUpdatedCallback: //7 " created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265">
									<outline text="handlePing (params.url, function (err, pingResponse) { //read the feed, add new stuff to database, etc." created="Sat, 17 Dec 2022 16:20:17 GMT">
										<outline text="logEvent ({" created="Fri, 16 Dec 2022 22:01:11 GMT">
											<outline text="method: &quot;GET&quot;," created="Fri, 16 Dec 2022 22:06:31 GMT"/>
											<outline text="path: config.thisServer.feedUpdatedCallback," created="Fri, 16 Dec 2022 22:01:54 GMT"/>
											<outline text="params," created="Fri, 16 Dec 2022 22:03:27 GMT"/>
											<outline text="myResponse: params.challenge" created="Sat, 17 Dec 2022 16:17:59 GMT"/>
											<outline text="});" created="Fri, 16 Dec 2022 22:01:49 GMT"/>
											</outline>
										<outline text="returnPlainText (params.challenge);" created="Mon, 12 Dec 2022 18:34:49 GMT"/>
										<outline text="});" created="Sat, 17 Dec 2022 16:20:18 GMT"/>
										</outline>
									<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
									</outline>
								<outline text="default: " created="Thu, 30 Jun 2022 15:30:25 GMT">
									<outline text="returnNotFound ();" created="Fri, 16 Dec 2022 20:51:50 GMT"/>
									<outline text="break;" created="Thu, 30 Jun 2022 15:30:27 GMT"/>
									</outline>
								<outline text="}" created="Mon, 03 Feb 2014 03:20:25 GMT" pgfnum="36830"/>
								</outline>
							<outline text="break;" created="Thu, 01 May 2014 20:42:44 GMT" pgfnum="40808"/>
							</outline>
						<outline text="}" created="Thu, 01 May 2014 20:42:10 GMT" pgfnum="40804"/>
						</outline>
					<outline text="}" created="Sat, 06 Nov 2021 20:25:18 GMT"/>
					</outline>
				<outline text="function everySecond () {" created="Thu, 15 Dec 2022 16:34:34 GMT">
					<outline text="if (utils.secondsSince (whenLastRequest) &gt; 3600) { //request notification once an hour" created="Fri, 16 Dec 2022 17:10:33 GMT">
						<outline text="requestNotification (config.defaultFeedUrl);" created="Thu, 15 Dec 2022 18:55:09 GMT"/>
						<outline text="whenLastRequest = new Date ();" created="Fri, 16 Dec 2022 17:24:20 GMT"/>
						<outline text="}" created="Fri, 16 Dec 2022 17:11:51 GMT"/>
						</outline>
					<outline text="if (flStatsChanged) {" created="Fri, 16 Dec 2022 21:54:17 GMT">
						<outline text="flStatsChanged = false;" created="Fri, 16 Dec 2022 21:54:23 GMT"/>
						<outline text="fs.writeFile (fnameStats, utils.jsonStringify (stats), function (err) {" created="Fri, 16 Dec 2022 21:54:26 GMT">
							<outline text="if (err) {" created="Sat, 17 Dec 2022 16:03:03 GMT">
								<outline text="console.log (&quot;everySecond: err.message == &quot; + err.message);" created="Sat, 17 Dec 2022 16:03:07 GMT"/>
								<outline text="}" created="Sat, 17 Dec 2022 16:03:20 GMT"/>
								</outline>
							<outline text="});" created="Fri, 16 Dec 2022 21:55:06 GMT"/>
							</outline>
						<outline text="}" created="Fri, 16 Dec 2022 21:54:31 GMT"/>
						</outline>
					<outline text="}" created="Thu, 15 Dec 2022 16:34:38 GMT"/>
					</outline>
				<outline text="readStats (function (err) {" created="Fri, 16 Dec 2022 20:48:34 GMT">
					<outline text="console.log (&quot;config == &quot; + utils.jsonStringify (config));" isComment="true" created="Mon, 21 Nov 2022 21:08:38 GMT"/>
					<outline text="davehttp.start (config, handleHttpRequest);"/>
					<outline text="setInterval (everySecond, 1000);" created="Fri, 16 Dec 2022 17:14:36 GMT"/>
					<outline text="});" created="Fri, 16 Dec 2022 21:56:00 GMT"/>
					</outline>
				</outline>
			<outline text="readme.md" created="Thu, 15 Dec 2022 19:40:42 GMT">
				<outline text="# rssCloud server demo" created="Thu, 15 Dec 2022 19:40:47 GMT">
					<outline text="A working example of a server-based feed reader implementation of rssCloud." created="Sat, 17 Dec 2022 16:49:04 GMT"/>
					</outline>
				<outline text="### A feed with a cloud element" created="Sat, 17 Dec 2022 16:49:09 GMT">
					<outline text="This is a Node.js app that works with one feed that has a cloud element. &lt;a href=&quot;http://feeder.scripting.com/returnjson?feedurl=http://scripting.com/rss.xml&quot;&gt;Example.&lt;/a&gt;" created="Fri, 16 Dec 2022 22:40:33 GMT"/>
					<outline text="When it starts up, it reads the feed, sees if it has a cloud element, and if so it requests notification from the server specified in the cloud element. It tells the cloud server how to notifiy it. " created="Sat, 17 Dec 2022 16:49:57 GMT"/>
					<outline text="The cloud server calls back to verify that there's someone listening on the other end who understands the rssCloud protocol. " created="Sat, 17 Dec 2022 16:50:25 GMT"/>
					<outline text="We get the test message and send back the expected response and we're in the network, ready to receive notification about the feed with the cloud element." created="Sat, 17 Dec 2022 16:51:32 GMT"/>
					</outline>
				<outline text="### When a notification comes in" created="Sat, 17 Dec 2022 16:49:57 GMT">
					<outline text="The notification will come in as a POST request that comes with one parameter in its body, the URL of the feed that updated." created="Sat, 17 Dec 2022 16:53:24 GMT"/>
					<outline text="We then read the feed, and do whatever we want with the info in the feed. " created="Sat, 17 Dec 2022 16:54:21 GMT"/>
					<outline text="We respond to the server with a string that it probably ignores. " created="Sat, 17 Dec 2022 16:54:33 GMT"/>
					</outline>
				<outline text="### Must be outside of firewalls" created="Sat, 17 Dec 2022 17:05:04 GMT">
					<outline text="This server must be callable by servers on the net. You can't even run a test version locally without some tunneling. I" created="Sat, 17 Dec 2022 17:05:16 GMT"/>
					</outline>
				<outline text="### A tour of the code" created="Sat, 17 Dec 2022 16:54:59 GMT">
					<outline text="I've placed little &quot;markers&quot; in the code in comments" created="Sat, 17 Dec 2022 16:55:18 GMT">
						<outline text="//1 -- config.thisServer is where I specify how the cloud server should call me by providing my domain, port and path. To run this app you will have to change these values." created="Thu, 08 Dec 2022 18:41:40 GMT"/>
						<outline text="//2 -- We log events into stats.events, if you want to see what's going on, that's a good place to watch." created="Sat, 17 Dec 2022 16:57:54 GMT"/>
						<outline text="//3 -- pleaseNotify is where we call the cloud server asking to be notified when the feed changes. " created="Sat, 17 Dec 2022 16:58:55 GMT"/>
						<outline text="//4 -- the feed you want to test is specified in config.defaultFeedUrl. It should be a feed you can update to cause a message to be sent to your copy of this app. I'm using a WordPress feed. They supprt rssCloud. " created="Sat, 17 Dec 2022 17:00:38 GMT"/>
						<outline text="//5 -- handlePing -- does nothing. This is where you'd read the feed, look for changed items, update your database, notify users, etc. " created="Sat, 17 Dec 2022 17:01:33 GMT"/>
						<outline text="//6 -- this is where we handle notification via POST requests." created="Sat, 17 Dec 2022 17:03:02 GMT"/>
						<outline text="//7 -- where we handle notification via GET requests." created="Sat, 10 Dec 2022 17:17:51 GMT"/>
						</outline>
					</outline>
				<outline text="### Comments, questions" created="Sat, 17 Dec 2022 17:06:07 GMT">
					<outline text="I started a thread &lt;a href=&quot;https://github.com/scripting/reallysimple/issues/12&quot;&gt;here&lt;/a&gt;. " created="Sat, 17 Dec 2022 17:06:13 GMT"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Thu, 15 Dec 2022 19:31:05 GMT">
			<outline text="nodeEditorSuite.utilities.buildIRssCloudServerDemo ()" created="Fri, 18 Feb 2022 16:51:42 GMT"/>
			</outline>
		</body>
	</opml>
