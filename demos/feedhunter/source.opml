<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sat, 23 Dec 2023 13:53:42 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: feedHunter</title>
		<dateCreated>Wed, 08 Nov 2023 19:37:13 GMT</dateCreated>
		<dateModified>Sat, 23 Dec 2023 13:53:41 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 5, 7, 9, 11, 12, 20, 26, 38, 39, 42, 48, 56, 57, 58, 63, 66, 74, 81</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>274</windowTop>
		<windowLeft>774</windowLeft>
		<windowBottom>1094</windowBottom>
		<windowRight>1969</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/feedhunter/" created="Thu, 13 Jul 2023 14:21:20 GMT">
			<outline text="worknotes.md" created="Sun, 18 Jun 2023 16:13:00 GMT">
				<outline text="#### 12/23/23; 8:15:45 AM by DW" created="Sat, 23 Dec 2023 13:15:45 GMT">
					<outline text="Bluesky came out with their first release of RSS feeds for each user's timeline, but their feed discovery link is a relative URL and we were not set up to handle it. In this release we make it work with relative URLs. " created="Sat, 23 Dec 2023 13:15:46 GMT"/>
					<outline text="This is what one of their link elements looks like:" created="Sat, 23 Dec 2023 13:17:07 GMT">
						<outline text="`&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; href=&quot;/profile/did:plc:oety7qbfx7x6exn2ytrwikmr/rss&quot;&gt;`" created="Sat, 23 Dec 2023 13:17:20 GMT"/>
						</outline>
					</outline>
				<outline text="#### 11/9/23; 8:55:31 AM by DW" created="Thu, 09 Nov 2023 13:55:30 GMT">
					<outline text="Improved docs, provided example app. " created="Thu, 09 Nov 2023 13:55:32 GMT"/>
					</outline>
				<outline text="#### 11/8/23; 9:53:51 AM by DW" created="Sat, 12 Aug 2023 22:34:42 GMT">
					<outline text="Started." created="Sat, 12 Aug 2023 22:34:44 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;feedhunter&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A Node.js package that looks for a feed, starting with the address of an HTML file.&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.4&quot;,"/>
					<outline text="&quot;main&quot;: &quot;feedhunter.js&quot;,"/>
					<outline text="&quot;files&quot;: [" created="Thu, 09 Nov 2023 13:59:39 GMT">
						<outline text="&quot;feedhunter.js&quot;," created="Thu, 09 Nov 2023 14:00:05 GMT"/>
						<outline text="&quot;package.json&quot;," created="Thu, 09 Nov 2023 14:00:07 GMT"/>
						<outline text="&quot;readme.md&quot;," created="Thu, 09 Nov 2023 14:00:07 GMT"/>
						<outline text="&quot;source.opml&quot;," created="Thu, 09 Nov 2023 14:00:07 GMT"/>
						<outline text="&quot;test/testfeedhunter.js&quot;," created="Thu, 09 Nov 2023 14:00:07 GMT"/>
						<outline text="&quot;test/package.json&quot;" created="Thu, 09 Nov 2023 14:00:07 GMT"/>
						<outline text="]," created="Thu, 09 Nov 2023 13:59:44 GMT"/>
						</outline>
					<outline text="&quot;license&quot;: &quot;GPLV2&quot;," created="Wed, 18 Jan 2023 17:19:16 GMT"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/reallysimple/tree/main/demos/feedhunter&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;reallysimple&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="feedhunter.js">
				<outline text="var myProductName = &quot;feedhunter&quot;, myVersion = &quot;0.4.4&quot;;"/>
				<outline text="" created="Wed, 08 Nov 2023 19:43:51 GMT"/>
				<outline text="exports.huntForFeed = huntForFeed;" created="Wed, 08 Nov 2023 19:43:51 GMT"/>
				<outline text="" created="Sat, 12 Aug 2023 22:37:22 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);" created="Sat, 05 Mar 2022 17:19:07 GMT"/>
				<outline text="const utils = require (&quot;daveutils&quot;); "/>
				<outline text="const request = require (&quot;request&quot;);" created="Sat, 05 Mar 2022 17:19:07 GMT"/>
				<outline text="const reallysimple = require (&quot;reallysimple&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const urlpackage = require (&quot;url&quot;);" created="Tue, 21 Jan 2014 00:09:23 GMT" pgfnum="36074"/>
				<outline text="" created="Wed, 08 Nov 2023 15:30:48 GMT"/>
				<outline text="function httpReadUrl (url, callback) { //8/21/22 by DW" created="Mon, 20 Jan 2014 17:26:34 GMT" pgfnum="36035">
					<outline text="request (url, function (err, response, data) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (response.statusCode != 200) {">
								<outline text="const errstruct = {">
									<outline text="message: &quot;Can't read the URL, \&quot;&quot; + url + &quot;\&quot; because we received a status code of &quot; + response.statusCode + &quot;.&quot;,"/>
									<outline text="statusCode: response.statusCode"/>
									<outline text="};"/>
									</outline>
								<outline text="callback (errstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, data);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Mon, 20 Jan 2014 17:26:49 GMT" pgfnum="36038"/>
					</outline>
				<outline text="function fixRelativeUrl (htmlUrl, url) { //12/23/23 by DW" created="Sat, 23 Dec 2023 13:30:10 GMT">
					<outline text="if (utils.beginsWith (url, &quot;//&quot;) || utils.beginsWith (url, &quot;http://&quot;) || utils.beginsWith (url, &quot;https://&quot;)) { //not a relative URL" created="Sat, 23 Dec 2023 13:30:31 GMT">
						<outline text="return (url);" created="Sat, 23 Dec 2023 13:32:08 GMT"/>
						<outline text="}" created="Sat, 23 Dec 2023 13:31:08 GMT"/>
						</outline>
					<outline text="else {" created="Sat, 23 Dec 2023 13:41:55 GMT">
						<outline text="const jstruct = new URL (url, htmlUrl);" created="Sat, 23 Dec 2023 13:51:02 GMT"/>
						<outline text="return (jstruct.href);" created="Sat, 23 Dec 2023 13:33:38 GMT"/>
						<outline text="}" created="Sat, 23 Dec 2023 13:41:57 GMT"/>
						</outline>
					<outline text="}" created="Sat, 23 Dec 2023 13:30:26 GMT"/>
					</outline>
				<outline text="function getFeedsLinkedToFromHtml (htmlUrl, callback) { //11/8/23 by DW" created="Wed, 08 Nov 2023 14:59:04 GMT">
					<outline text="Changes" isComment="true" created="Wed, 08 Nov 2023 14:59:31 GMT">
						<outline text="11/8/23; 9:59:37 AM by DW" created="Wed, 08 Nov 2023 14:59:37 GMT">
							<outline text="Look for &lt;link&gt; elements that point to RSS or Atom feeds in the html text." created="Wed, 08 Nov 2023 14:59:38 GMT"/>
							</outline>
						</outline>
					<outline text="function findFeedsFromHTML (html) {">
						<outline text="const regex = /&lt;link[^&gt;]+type=&quot;application\/(?:rss\+xml|atom\+xml)&quot;[^&gt;]+href=&quot;([^&quot;]+)&quot;[^&gt;]*&gt;/g;"/>
						<outline text="let match;"/>
						<outline text="const feeds = [];"/>
						<outline text="while ((match = regex.exec (html)) !== null) {">
							<outline text="feeds.push (match [1]);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (feeds);"/>
						<outline text="}"/>
						</outline>
					<outline text="httpReadUrl (htmlUrl, function (err, htmltext) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var feedlist = findFeedsFromHTML (htmltext);"/>
							<outline text="if (feedlist.length == 0) {" created="Fri, 20 Oct 2023 13:58:40 GMT">
								<outline text="const message = &quot;Can't find any feeds in the HTML text.&quot;;" created="Fri, 20 Oct 2023 13:58:56 GMT"/>
								<outline text="callback ({message});"/>
								<outline text="}" created="Fri, 20 Oct 2023 13:58:48 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 20 Oct 2023 13:58:49 GMT">
								<outline text="callback (undefined, feedlist);" created="Fri, 20 Oct 2023 13:59:27 GMT"/>
								<outline text="}" created="Fri, 20 Oct 2023 13:58:51 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Wed, 08 Nov 2023 14:59:21 GMT"/>
					</outline>
				<outline text="function huntForFeed (htmlUrl, options, callback) {" created="Wed, 08 Nov 2023 15:23:24 GMT">
					<outline text="var config = {" created="Fri, 10 Feb 2023 16:10:01 GMT">
						<outline text="filePathsToCheck: [" created="Wed, 08 Nov 2023 15:30:47 GMT">
							<outline text="&quot;feed&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;rss&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;feeds/posts/default&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;feed.xml&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;rss.xml&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;index.xml&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;blog/feed&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;feeds/videos.xml&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;atom.xml&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;blog&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;rss/index.xml&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;feed.rss&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;feed/atom&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;feed/podcast&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;blog/rss.xml&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;blog/index.xml&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;news/feed&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;blog-feed.xml&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;rss.php&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;blog/rss&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;bridge01&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;feed.atom&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;blog/atom.xml&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;feed/rss&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;index.rss&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;RSSFeed.aspx&quot;," created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="&quot;blog/feed.xml&quot;" created="Wed, 08 Nov 2023 15:31:14 GMT"/>
							<outline text="]" created="Wed, 08 Nov 2023 15:31:06 GMT"/>
							</outline>
						<outline text="};" created="Fri, 10 Feb 2023 16:12:11 GMT"/>
						</outline>
					<outline text="if (options !== undefined) {" created="Wed, 08 Nov 2023 19:40:17 GMT">
						<outline text="for (var x in options) {" created="Wed, 08 Nov 2023 19:41:49 GMT">
							<outline text="config [x] = options [x];" created="Wed, 08 Nov 2023 19:42:13 GMT"/>
							<outline text="}" created="Wed, 08 Nov 2023 19:42:20 GMT"/>
							</outline>
						<outline text="}" created="Wed, 08 Nov 2023 19:40:28 GMT"/>
						</outline>
					<outline text="const parsedUrl = urlpackage.parse (htmlUrl, true);"/>
					<outline text="const origin = parsedUrl.protocol + &quot;//&quot; + parsedUrl.host + &quot;/&quot;;" created="Wed, 08 Nov 2023 16:31:42 GMT"/>
					<outline text="console.log (utils.jsonStringify (parsedUrl));" isComment="true" created="Wed, 08 Nov 2023 16:30:04 GMT"/>
					<outline text="console.log (&quot;origin == &quot; + origin);" isComment="true" created="Wed, 08 Nov 2023 15:47:49 GMT"/>
					<outline text="var fileQueue = new Array ();" created="Wed, 08 Nov 2023 15:28:53 GMT"/>
					<outline text="getFeedsLinkedToFromHtml (htmlUrl, function (err, feeds) {" created="Wed, 08 Nov 2023 15:05:07 GMT">
						<outline text="if (feeds !== undefined) {" created="Wed, 08 Nov 2023 15:29:13 GMT">
							<outline text="feeds.forEach (function (url) {" created="Wed, 08 Nov 2023 15:29:24 GMT">
								<outline text="url = fixRelativeUrl (htmlUrl, url); //12/23/23 by DW" created="Sat, 23 Dec 2023 13:29:40 GMT"/>
								<outline text="fileQueue.push (url);" created="Wed, 08 Nov 2023 15:29:35 GMT"/>
								<outline text="});" created="Wed, 08 Nov 2023 15:29:30 GMT"/>
								</outline>
							<outline text="}" created="Wed, 08 Nov 2023 15:29:19 GMT"/>
							</outline>
						<outline text="config.filePathsToCheck.forEach (function (item) {" created="Wed, 08 Nov 2023 15:36:19 GMT">
							<outline text="fileQueue.push (origin + item);" created="Wed, 08 Nov 2023 15:29:35 GMT"/>
							<outline text="});" created="Wed, 08 Nov 2023 15:36:27 GMT"/>
							</outline>
						<outline text="function checkNext (ix) {" created="Wed, 08 Nov 2023 16:08:38 GMT">
							<outline text="if (ix &lt; fileQueue.length) {" created="Wed, 08 Nov 2023 16:08:50 GMT">
								<outline text="const feedUrl = fileQueue [ix];" created="Wed, 08 Nov 2023 16:09:42 GMT"/>
								<outline text="reallysimple.readFeed (feedUrl, function (err, theFeed) {" created="Sat, 19 Mar 2022 15:14:01 GMT">
									<outline text="if (err) {" created="Wed, 08 Nov 2023 16:11:00 GMT">
										<outline text="console.log (&quot;huntForFeed: feedUrl == &quot; + feedUrl);" isComment="true" created="Wed, 08 Nov 2023 16:12:26 GMT"/>
										<outline text="checkNext (ix + 1);" created="Wed, 08 Nov 2023 16:11:12 GMT"/>
										<outline text="}" created="Wed, 08 Nov 2023 16:11:22 GMT"/>
										</outline>
									<outline text="else {" created="Wed, 08 Nov 2023 16:11:24 GMT">
										<outline text="console.log (&quot;huntForFeed: found! feedUrl == &quot; + feedUrl);" isComment="true" created="Wed, 08 Nov 2023 16:12:26 GMT"/>
										<outline text="callback (feedUrl); " created="Wed, 08 Nov 2023 16:11:26 GMT"/>
										<outline text="}" created="Wed, 08 Nov 2023 16:11:33 GMT"/>
										</outline>
									<outline text="});" created="Sat, 19 Mar 2022 15:15:01 GMT"/>
									</outline>
								<outline text="}" created="Wed, 08 Nov 2023 16:09:05 GMT"/>
								</outline>
							<outline text="else {" created="Wed, 08 Nov 2023 16:09:06 GMT">
								<outline text="callback (undefined); //didn't find a feed" created="Wed, 08 Nov 2023 16:09:09 GMT"/>
								<outline text="}" created="Wed, 08 Nov 2023 16:09:20 GMT"/>
								</outline>
							<outline text="}" created="Wed, 08 Nov 2023 16:08:48 GMT"/>
							</outline>
						<outline text="checkNext (0);" created="Wed, 08 Nov 2023 16:07:59 GMT"/>
						<outline text="});" created="Wed, 08 Nov 2023 15:05:42 GMT"/>
						</outline>
					<outline text="}" created="Wed, 08 Nov 2023 15:23:37 GMT"/>
					</outline>
				</outline>
			<outline text="readme.md" created="Wed, 08 Nov 2023 19:51:01 GMT">
				<outline text="# feedHunter" created="Wed, 08 Nov 2023 19:51:02 GMT">
					<outline text="A Node.js &lt;a href=&quot;https://www.npmjs.com/package/feedhunter&quot;&gt;package&lt;/a&gt; that looks for a feed, starting with the address of an HTML file." created="Wed, 08 Nov 2023 19:51:09 GMT"/>
					</outline>
				<outline text="### How to" created="Thu, 09 Nov 2023 13:42:39 GMT">
					<outline text="&lt;%includeExample (&quot;exampleCall&quot;)%&gt;"/>
					<outline text="Note: The second parameter to &lt;i&gt;feedhunter.huntForFeed&lt;/i&gt; allows you to replace our set of standard feed locations with your own list." created="Thu, 09 Nov 2023 13:54:35 GMT"/>
					</outline>
				<outline text="### What it does" created="Wed, 08 Nov 2023 20:54:38 GMT">
					<outline text="When the user subscribes to an HTML file in FeedLand, first we look for all the &amp;lt;link&gt; elements in the HTML that point to feeds. We look at each feed in turn, and if we find one that can be read and parses as a feed, we subscribe to that feed and display its &lt;i&gt;Feed Info&lt;/i&gt; page. We do that with a call to feedhunter.huntForFeed." created="Wed, 08 Nov 2023 20:44:19 GMT"/>
					<outline text="We also use a set of common feed locations we found by studying the feed list of the &lt;a href=&quot;https://indieblog.page/export&quot;&gt;indieblog&lt;/a&gt; site (a great resource for our work, thanks!), and by studying the feeds people have subscribed to on &lt;a href=&quot;https://feedland.org&quot;&gt;feedland.org&lt;/a&gt;. " created="Wed, 08 Nov 2023 20:55:23 GMT"/>
					<outline text="I put this code in a separate package, because it seemed it might be useful in other contexts and people may have other ideas for standard feed locations we could add to the search." created="Wed, 08 Nov 2023 20:47:37 GMT"/>
					</outline>
				<outline text="### Experiment in FeedLand" created="Thu, 09 Nov 2023 14:11:49 GMT">
					<outline text="If you want to try an experiment, choose &lt;i&gt;To one feed&lt;/i&gt; from the Subscribe sub-menu in FeedLand's main menu, and enter http://bullmancuso.com. " created="Wed, 08 Nov 2023 20:50:50 GMT"/>
					<outline text="I put a copy of a very old feed in a weird location, one of the places &lt;a href=&quot;https://github.com/scripting/reallysimple/tree/main/demos/feedhunter&quot;&gt;feedhunter&lt;/a&gt; looks. " created="Thu, 09 Nov 2023 14:12:04 GMT"/>
					<outline text="If it's working we'll find the feed anyway. :smile:" created="Thu, 09 Nov 2023 14:12:15 GMT"/>
					</outline>
				<outline text="### Questions, comments?" created="Thu, 09 Nov 2023 13:50:20 GMT">
					<outline text="Create an issue &lt;a href=&quot;https://github.com/scripting/reallysimple/issues&quot;&gt;here&lt;/a&gt;. " created="Thu, 09 Nov 2023 13:50:25 GMT"/>
					</outline>
				</outline>
			<outline text="test/testfeedhunter.js" created="Wed, 08 Nov 2023 19:39:11 GMT">
				<outline text="const feedhunter = require (&quot;feedhunter&quot;);" created="Thu, 09 Nov 2023 13:42:43 GMT"/>
				<outline text="const htmlUrl = &quot;https://bsky.app/profile/scripting.com&quot;;" created="Thu, 09 Nov 2023 13:46:56 GMT"/>
				<outline text="const htmlUrl = &quot;http://bullmancuso.com&quot;;" isComment="true" created="Thu, 09 Nov 2023 13:46:56 GMT"/>
				<outline text="feedhunter.huntForFeed (htmlUrl, undefined, function (feedUrl) {" created="Thu, 09 Nov 2023 13:43:13 GMT">
					<outline text="if (feedUrl === undefined) {" created="Thu, 09 Nov 2023 13:43:54 GMT">
						<outline text="console.log (&quot;\nCouldn't find a feed for this page.\n&quot;);" created="Thu, 09 Nov 2023 13:44:03 GMT"/>
						<outline text="}" created="Thu, 09 Nov 2023 13:44:16 GMT"/>
						</outline>
					<outline text="else {" created="Thu, 09 Nov 2023 13:44:17 GMT">
						<outline text="console.log (&quot;\nWe found a feed: &quot; + feedUrl + &quot;\n&quot;);" created="Thu, 09 Nov 2023 13:44:03 GMT"/>
						<outline text="}" created="Thu, 09 Nov 2023 13:46:47 GMT"/>
						</outline>
					<outline text="});" created="Thu, 09 Nov 2023 13:43:48 GMT"/>
					</outline>
				</outline>
			<outline text="test/package.json" created="Wed, 08 Nov 2023 19:39:11 GMT">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;testfeedhunter&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;feedhunter.js&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;," created="Wed, 18 Jan 2023 17:19:16 GMT"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;feedhunter&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="config.json" isComment="true" created="Mon, 14 Aug 2023 14:20:24 GMT">
				<outline text="{" created="Mon, 14 Aug 2023 14:20:26 GMT">
					<outline text="}" created="Mon, 14 Aug 2023 14:20:27 GMT"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Wed, 08 Nov 2023 19:48:56 GMT">
			<outline text="nodeEditorSuite.utilities.buildFeedHunter ()" created="Wed, 08 Nov 2023 19:48:58 GMT"/>
			</outline>
		</body>
	</opml>
